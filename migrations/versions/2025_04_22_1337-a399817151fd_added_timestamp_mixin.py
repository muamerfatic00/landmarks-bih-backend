"""Added timestamp mixin.

Revision ID: a399817151fd
Revises: 3edc200ecf10
Create Date: 2025-04-22 13:37:56.028647

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = 'a399817151fd'
down_revision: Union[str, None] = '3edc200ecf10'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('cities', sa.Column('created_at', sa.DateTime(), nullable=True))
    op.add_column('cities', sa.Column('updated_at', sa.DateTime(), nullable=True))
    op.add_column('landmarks', sa.Column('created_at', sa.DateTime(), nullable=True))
    op.add_column('landmarks', sa.Column('updated_at', sa.DateTime(), nullable=True))

    # Update the existing rows to set the created_at and updated_at values.
    connection = op.get_bind()

    # Set current timestamp for existing records in cities
    connection.execute(
        sa.text("UPDATE cities SET created_at = NOW(), updated_at = NOW()")
    )

    # Set current timestamp for existing records in landmarks
    connection.execute(
        sa.text("UPDATE landmarks SET created_at = NOW(), updated_at = NOW()")
    )

    # Alter the columns to be non-nullable
    op.alter_column('cities', 'created_at', nullable=False)
    op.alter_column('cities', 'updated_at', nullable=False)
    op.alter_column('landmarks', 'created_at', nullable=False)
    op.alter_column('landmarks', 'updated_at', nullable=False)

    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_column('landmarks', 'updated_at')
    op.drop_column('landmarks', 'created_at')
    op.drop_column('cities', 'updated_at')
    op.drop_column('cities', 'created_at')
    # ### end Alembic commands ###
